setwd("~/")
setwd("~/")
source('~/bank.R', encoding = 'UTF-8')
source('~/bank.R', encoding = 'UTF-8')
setwd("~/")
setwd("~/")
setwd("~/")
setwd("~/mc")
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
setwd("C:\Users\tatiana\Documents\mc")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv(".bank-full.csv", header = T, sep = ";")
data <- read.csv("./bank-full.csv", header = T, sep = ";")
setwd("~/mc")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents")
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
setwd("~/")
data_2012 <- read.csv(file = "data/NIJ2012_MAR01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2013 <- read.csv(file = "data/NIJ2013_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2014 <- read.csv(file = "data/NIJ2014_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2015 <- read.csv(file = "data/NIJ2015_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
View(data_2015)
View(data_2014)
View(data_2013)
View(data_2012)
plot(data_2014)
library(devtools)
if(!require(devtools)){
install.packages("devtools")
}
library(devtools)
install_github("ujjwalkarn/xda")
?xda
library(xda)
?xda
??xda
numSummary(iris)
numSummary(iris)
data_2012_2015 <- read.csv(file = "data/data_2012-2015.csv", header = T, sep = ";", stringsAsFactors = F)
numSummary(data_2012_2015)
charSummary(data_2012_2015)
View(data_2012_2015)
bivariate(data_2012_2015,'CATEGORY','occ_date')
file_name <- "bi_category-occ_date.txt"
file_name <- paste(type, file_name)
bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
s <- bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'occ_date')
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'x_cordinate')
Plot(data_2012_2015,'x_coordinate')
Plot(mtcars,'mpg')
Plot(iris,'Species')
iris
Plot(iris,'Sepal.Length')
?plot
plot(data_2012_2015)
plot(data_2012_2015$CATEGORY)
boxplot(mtcars$mpg)
mtcars <- edit(mtcars)
boxplot(mtcars$mpg)
IQR(mtcars$mpg)
?plot
?plot(analysis, which = 2)
# Scatterplot: Wage vs. Age by race
library(ISLR)
with(Wage, plot(age, wage, col = c("lightgreen","navy", "mediumvioletred",
"red")[race], pch = 19, cex=0.6))
legend(70, 310, legend=levels(Wage$race), col=c("lightgreen","navy",
"mediumvioletred", "red"), bty="n", cex=0.7, pch=19)
title(main = "Relationship between Age and Wage by Race")
install.packages("ISLR")
library(ISLR)
with(Wage, plot(age, wage, col = c("lightgreen","navy", "mediumvioletred",
"red")[race], pch = 19, cex=0.6))
legend(70, 310, legend=levels(Wage$race), col=c("lightgreen","navy",
"mediumvioletred", "red"), bty="n", cex=0.7, pch=19)
title(main = "Relationship between Age and Wage by Race")
Wage
View(Wage)
data <- read.csv(file = "data/data.csv", header = T, sep = ";", stringsAsFactors = F)
data$occ_date <- as.POSIXct(data$occ_date, format="%m/%d/%Y")
setwd("C:/Users/tatiana/nij-challenge")
data <- read.csv(file = "data/data.csv", header = T, sep = ";", stringsAsFactors = F)
data$occ_date <- as.POSIXct(data$occ_date, format="%m/%d/%Y")
View(data)
str(data)
# view top few records of data
head(data)
# Five Numbersummary & interqurtile range
# Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data.
fivenum(mtcars$mpg)
fivenum(data$census_trac)
summary(data)
# data's summary
data <- read.csv(file = "data/data.csv", header = T, sep = ";", stringsAsFactors = F)
summary(data)
str(data)
str(na.omit(data))
summary(na.omit(data))
data <- na.omit(data)
View(data)
unique(data$census_tract)
length(unique(data$census_tract))
fivenum(data$census_trac)
View(subset(data, census_tract == 980000))
> View(subset(data, census_tract == 980000)
data$occ_date <- as.POSIXct(data$occ_date, format="%m/%d/%Y")
?POSIXct
> View(subset(data, census_tract == 980000 & occ_date.year == 2016)
> View(subset(data, census_tract == 980000 && occ_date.year == 2016)
> View(subset(data, census_tract == 980000)
View(subset(data, census_tract == 980000 & occ_date.year == 2016)
)
View(subset(data, census_tract == 980000 & occ_date$year == 2016))
View(subset(data, census_tract == 980000 & occ_date$dd_mmm_yy$year+1900 == 2016))
View(subset(data, census_tract == 980000 & strftime(occ_date, format = "%Y") == 2016))
library(xlsx)
install.packages("xlsx")
ct_980000_dt_2016 <- subset(data, census_tract == 980000 & strftime(occ_date, format = "%Y") == 2016)
write.xlsx(mydata, "data/ct_980000_dt_2016.xlsx")
library(xlsx)
write.xlsx(mydata, "data/ct_980000_dt_2016.xlsx")
write.xlsx(ct_980000_dt_2016, "data/ct_980000_dt_2016.xlsx")
ct_10600_dt_2016 <- subset(data, census_tract == 10600 & strftime(occ_date, format = "%Y") == 2016)
write.xlsx(ct_10600_dt_2016, "data/ct_980000_dt_2016.xlsx")
write.xlsx(ct_980000_dt_2016, "data/ct_980000_dt_2016.xlsx")
str(data)
hist(ct_980000_dt_2016,
main = "Histogram for MPG",
xlab = "MPG",
border = "blue",
col = "green",
xlim = c(10, 35),
ylim = c(0, 0.12),
breaks = 10,
prob = T)
boxplot(ct_980000_dt_2016)
plot(ct_980000_dt_2016)
plot(ct_980000_dt_2016$CATEGORY)
plot(ct_980000_dt_2016$CATEGORY, ct_980000_dt_2016$census_tract, xlab = "Category", ylab = "census_tract")
View(ct_980000_dt_2016)
plot(ct_980000_dt_2016$CATEGORY)
boxplot(ct_980000_dt_2016$CATEGORY)
plot(ct_980000_dt_2016$CATEGORY)
boxplot(iris$Sepal.Length ~ iris$Species)
plot(ct_980000_dt_2016$CATEGORY ~ ct_980000_dt_2016$census_tract, xlab = "Category", ylab = "census_tract")
boxplot(ct_980000_dt_2016$CATEGORY ~ ct_980000_dt_2016$census_tract, xlab = "Category", ylab = "census_tract")
boxplot(ct_980000_dt_2016$census_tract ~ ct_980000_dt_2016$CATEGORY, xlab = "Category", ylab = "census_tract")
boxplot(ct_980000_dt_2016$CATEGORY ~ ct_980000_dt_2016$census_tract, xlab = "Category", ylab = "census_tract")
library(ggplot2)
ggp <- ggplot(ct_980000_dt_2016,aes(x=CATEGORY))
ggp + geom_histogram(fill="lightgreen")
hist(ct_980000_dt_2016$CATEGORY,
main = "Histogram for MPG",
xlab = "MPG",
border = "blue",
col = "green",
xlim = c(10, 35),
ylim = c(0, 0.12),
breaks = 10,
prob = T)
cat.freq <- table(ct_10600_dt_2016$CATEGORY)
barplot(cat.freq)
cat.freq <- table(ct_10600_dt_2016$CALL.GROUPS)
barplot(cat.freq)
names(ct_10600_dt_2016$CALL.GROUPS)
str(ct_10600_dt_2016$CALL.GROUPS)
summary(ct_10600_dt_2016$CALL.GROUPS)
names(ct_10600_dt_2016$CALL.GROUPS)
head(ct_10600_dt_2016$CALL.GROUPS)
A1 <- summarize(mtcars$mpg, mtcars$cyl, summary)
library(Hmisc)
# used to missing values
describe(mtcars)
A1 <- summarize(mtcars$mpg, mtcars$cyl, summary)
A1
unique(ct_980000_dt_2016$CALL.GROUPS)
?barplot
summary(data)
str(data)
names(data)
names(data$CALL.GROUPS)
unique(data$CATEGORY)
unique(data$CALL.GROUPS)
unique(data$final_case_type)
unique(data$CASE.DESC)
unique(data$census_tract)
anova_fun <- function(analysis, type){
#anova
#h0: they are equal, h1: they are not (p<0.05)
anova <- aov(analysis)
file_name <- " anova sumary.txt"
file_name <- paste(type, file_name)
s<-summary(anova)
capture.output(s, file = file_name)
name <- " plot witch 1.png"
name <- paste(type, name)
png(filename=name)
#Caso queira visualizar o gráfico
plot(analysis, which = 1)
dev.off()
name <- " plot witch 2.png"
name <- paste(type, name)
png(filename=name)
#can se that there's a positive skewness in the data
plot(analysis, which = 2)
dev.off()
sresids <- rstandard(analysis)
name <- " histogram.png"
name <- paste(type, name)
png(filename=name)
hist(sresids)
dev.off()
#to know the variable that are significantly different
# significant difference p < 0.05
#there's just two types, so no need for turkey's test
file_name <- " TukeyHSD sumary.txt"
file_name <- paste(type, file_name)
s<-TukeyHSD(anova)
capture.output(s, file = file_name)
}
name <- "analyse/type stripchart.png"
png(filename=name)
#visualizing data
stripchart(as.numeric(data$occ_date)~CATEGORY,
data=data,
main="Different strip chart for each type",
xlab="Type",
ylab="Time",
col="brown3",
vertical=TRUE,
pch=19,
method = "jitter", jitter = 0.004
)
dev.off()
#fitting data to anova
aov_category <- lm(as.numeric(data$occ_date)~CATEGORY,data=data)
anova_fun(aov_category, "analyse/type")
anova_fun <- function(analysis, type){
#anova
#h0: they are equal, h1: they are not (p<0.05)
anova <- aov(analysis)
file_name <- " anova sumary.txt"
file_name <- paste(type, file_name)
s<-summary(anova)
capture.output(s, file = file_name)
name <- " plot witch 1.png"
name <- paste(type, name)
png(filename=name)
#Caso queira visualizar o gráfico
plot(analysis, which = 1)
dev.off()
name <- " plot witch 2.png"
name <- paste(type, name)
png(filename=name)
#can se that there's a positive skewness in the data
plot(analysis, which = 2)
dev.off()
name <- " plot witch 3.png"
name <- paste(type, name)
png(filename=name)
#can se that there's a positive skewness in the data
plot(analysis, which = 3)
dev.off()
name <- " plot witch 4.png"
name <- paste(type, name)
png(filename=name)
#can se that there's a positive skewness in the data
plot(analysis, which = 4)
dev.off()
sresids <- rstandard(analysis)
name <- " histogram.png"
name <- paste(type, name)
png(filename=name)
hist(sresids)
dev.off()
#to know the variable that are significantly different
# significant difference p < 0.05
#there's just two types, so no need for turkey's test
file_name <- " TukeyHSD sumary.txt"
file_name <- paste(type, file_name)
s<-TukeyHSD(anova)
capture.output(s, file = file_name)
}
name <- "analyse/type stripchart.png"
png(filename=name)
#visualizing data
stripchart(as.numeric(data$occ_date)~CATEGORY,
data=data,
main="Different strip chart for each type",
xlab="Type",
ylab="Time",
col="brown3",
vertical=TRUE,
pch=19,
method = "jitter", jitter = 0.004
)
dev.off()
#fitting data to anova
aov_category <- lm(as.numeric(data$occ_date)~CATEGORY,data=data)
anova_fun(aov_category, "analyse/type")
ggplot(ct_980000_dt_2016, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = Bug), position = "dodge")
ggplot(ct_980000_dt_2016, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CALL.GROUPS), position = "dodge")
ggplot(ct_980000_dt_2016, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
unique(ct_980000_dt_2016$CATEGORY)
ggplot(ct_980000_dt_2016, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
type <- "bar"
name <- " bar plot.png"
name <- paste(type, name)
## plots
type <- "category"
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
## plots
bar <- function(type, data){
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
}
type <- "analyse/category"
bar(type, data)
bar(type, data)
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
bar(type, data)
bar("analyse/category", data)
## plots
bar <- function(type, data){
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
}
bar("analyse/category", data)
g_bar <- function(type, data){
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
}
g_bar("analyse/category", data)
g_bar <- function(type){
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
}
g_bar("analyse/category")
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
type <- "analyse/call_groups"
name <- " bar plot.png"
name <- paste(type, name)
png(filename=name)
ggplot(data, aes(CALL.GROUPS, ..count..)) + geom_bar(aes(fill = CALL.GROUPS), position = "dodge")
dev.off()
ggplot(data, aes(CALL.GROUPS, ..count..)) + geom_bar(aes(fill = CALL.GROUPS), position = "dodge")
install.packages("Cairo")
library(Cairo)
Cairo(file="Cairo_PNG_72_dpi_x_2.png",
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=72)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
Cairo(file="Cairo_PNG_72_dpi_x_2.png",
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
category <- "category.png"
call <- "call.png"
final <- "final.png"
case <- "case.png"
census <- "census.png"
# Cairo package
# http://gforge.se/2013/02/exporting-nice-plots-in-r/
if(!require(Cairo)){
install.packages("Cairo")
}
library(Cairo)
graphic <- "analyse/bar "
name <- paste(graphic, category)
Cairo(file=name,
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(CATEGORY, ..count..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
dev.off()
name <- paste(graphic, call)
Cairo(file=name,
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(CALL.GROUPS, ..count..)) + geom_bar(aes(fill = CALL.GROUPS), position = "dodge")
dev.off()
name <- paste(graphic, final)
Cairo(file=name,
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(final_case_type, ..count..)) + geom_bar(aes(fill = final_case_type), position = "dodge")
dev.off()
name <- paste(graphic, case)
Cairo(file=name,
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(CASE.DESC, ..count..)) + geom_bar(aes(fill = CASE.DESC), position = "dodge")
dev.off()
name <- paste(graphic, census)
Cairo(file=name,
type="png",
units="in",
width=5*2,
height=4*2,
pointsize=12*2,
dpi=144)
ggplot(data, aes(census_tract, ..count..)) + geom_bar(aes(fill = census_tract), position = "dodge")
dev.off()
hist(data$census_tract)
hist(data$census_tract,
main = "Histogram for MPG",
xlab = "MPG",
border = "blue",
col = "green",
xlim = c(10, 35),
ylim = c(0, 0.12),
breaks = 10,
prob = T)
hist(data$census_tract,
main = "Histogram for MPG",
xlab = "MPG",
border = "blue",
col = "green",
xlim = c(10, 35),
ylim = c(0, 0.12),
breaks = 10)
boxplot(data$census_tract)
boxplot(ct_980000_dt_2016$census_tract)
boxplot(ct_980000_dt_2016$census_tract, ct_980000_dt_2016$CATEGORY)
boxplot(ct_980000_dt_2016$census_tract~ ct_980000_dt_2016$CATEGORY)
boxplot(ct_980000_dt_2016$CATEGORY~ ct_980000_dt_2016$census_tract)
ggplot(data, aes(final_case_type, ..count..)) + geom_bar(aes(fill = final_case_type), position = "dodge")
ggplot(data, aes(CASE.DESC, ..count..)) + geom_bar(aes(fill = CASE.DESC), position = "dodge")
ggplot(data, aes(final_case_type, ..count..)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") +
geom_text(aes(label = ..count.., y= ..prop..), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="test2") +
facet_grid(~data) +
scale_y_continuous(labels=percent)
install.packages("scales")
install.packages("scales")
install.packages("scales")
ggplot(data, aes(CATEGORY, ..prop..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
library(ggplot2)
ggplot(data, aes(CATEGORY, ..prop..)) + geom_bar(aes(fill = CATEGORY), position = "dodge")
install.packages("scales")
install.packages("scales")
