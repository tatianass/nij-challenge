setwd("~/")
setwd("~/")
source('~/bank.R', encoding = 'UTF-8')
source('~/bank.R', encoding = 'UTF-8')
setwd("~/")
setwd("~/")
setwd("~/")
setwd("~/mc")
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
setwd("C:\Users\tatiana\Documents\mc")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv(".bank-full.csv", header = T, sep = ";")
data <- read.csv("./bank-full.csv", header = T, sep = ";")
setwd("~/mc")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents/mc")
data <- read.csv("bank-full.csv", header = T, sep = ";")
setwd("C:/Users/tatiana/Documents")
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
source('~/mc/bank.R')
data <- read.csv("bank-full.csv", header = T, sep = ";")
source('~/mc/bank.R')
setwd("~/")
data_2012 <- read.csv(file = "data/NIJ2012_MAR01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2013 <- read.csv(file = "data/NIJ2013_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2014 <- read.csv(file = "data/NIJ2014_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
data_2015 <- read.csv(file = "data/NIJ2015_JAN01_DEC31.csv", header = T, sep = ";", stringsAsFactors = F)
View(data_2015)
View(data_2014)
View(data_2013)
View(data_2012)
plot(data_2014)
library(devtools)
if(!require(devtools)){
install.packages("devtools")
}
library(devtools)
install_github("ujjwalkarn/xda")
?xda
library(xda)
?xda
??xda
numSummary(iris)
numSummary(iris)
data_2012_2015 <- read.csv(file = "data/data_2012-2015.csv", header = T, sep = ";", stringsAsFactors = F)
numSummary(data_2012_2015)
charSummary(data_2012_2015)
View(data_2012_2015)
bivariate(data_2012_2015,'CATEGORY','occ_date')
file_name <- "bi_category-occ_date.txt"
file_name <- paste(type, file_name)
bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
s <- bivariate(data_2012_2015,'CATEGORY','occ_date')
capture.output(s, file = file_name)
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'occ_date')
Plot(data_2012_2015,'CATEGORY')
Plot(data_2012_2015,'x_cordinate')
Plot(data_2012_2015,'x_coordinate')
Plot(mtcars,'mpg')
Plot(iris,'Species')
iris
Plot(iris,'Sepal.Length')
?plot
plot(data_2012_2015)
plot(data_2012_2015$CATEGORY)
boxplot(mtcars$mpg)
mtcars <- edit(mtcars)
boxplot(mtcars$mpg)
IQR(mtcars$mpg)
library(xlsx)
library(Cairo)
library(ggplot2)
library(scales)
library(dplyr)
library(grid)
library(plotly)
d <- read.csv(file = "data/mp_data.csv", header = T, sep = ";", stringsAsFactors = F)
setwd("C:/Users/tatiana/nij-challenge")
d <- read.csv(file = "data/mp_data.csv", header = T, sep = ";", stringsAsFactors = F)
data <- data %>% filter(strftime(d$occ_date, format("%Y")) = "2012" )
data <- data %>% filter(strftime(d$occ_date, format("%Y")) == "2012" )
data <- data %>% filter(d, strftime(d$occ_date, format("%Y")) == "2012" )
data <- d %>% filter(strftime(d$occ_date, format("%Y")) == "2012" )
View(data)
data <- d %>% filter(strftime(d$occ_date, format("%Y")) = "2012" )
filter(d, strftime(d$occ_date, format("%Y")) == "2012" )
knitr::opts_chunk$set(echo = TRUE)
library(Cairo)
require(Cairo)
knitr::opts_chunk$set(echo = TRUE)
require(Cairo)
require(ggplot2)
require(scales)
require(dplyr)
require(grid)
require(plotly)
require(tidyr)
theme_set(theme_bw())
d <- read.csv(file = "data/mp_data.csv", header = T, sep = ";", stringsAsFactors = F)
data <- d
# convert character to date
data$occ_date <- as.POSIXct(data$occ_date, format="%d/%m/%Y")
# removing na's
data <- na.omit(data)
# see general aspects of the data
str(data)
# view top few records of data
head(data)
# Five Numbersummary & interqurtile range
# Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data.
fivenum(data$census_trac)
# data's summary
summary(data)
# uniques
unique(data$CATEGORY)
unique(data$CALL.GROUPS)
unique(data$final_case_type)
unique(data$CASE.DESC)
unique(data$census_tract)
p <-ggplot(data, aes(CATEGORY)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CATEGORY), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Category" ,y = "Percent", fill="Category") +
scale_y_continuous(labels=percent)
ggplotly()
library(plotly)
installed.packages(plotly)
installed.packages("plotly")
p <-ggplot(data, aes(CATEGORY)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CATEGORY), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Category" ,y = "Percent", fill="Category") +
scale_y_continuous(labels=percent)
ggplotly()
source('~/Downloads/nij-challenge-master/eda.R')
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
if(!require(plotly)){
install.packages("plotly", dependencies = T)
}
if(!require(Cairo)){
installed.packages("Cairo", dependencies = T)
}
knitr::opts_chunk$set(echo = TRUE)
if(!require(plotly)){
install.packages("plotly", dependencies = T)
}
if(!require(Cairo)){
installed.packages("Cairo", dependencies = T)
}
knitr::opts_chunk$set(echo = TRUE)
if(!require(plotly)){
install.packages("plotly", dependencies = T)
}
if(!require(Cairo)){
installed.packages("Cairo", dependencies = T)
}
installed.packages("Cairo", dependencies = T)
install.packages('Cairo')
knitr::opts_chunk$set(echo = TRUE)
if(!require(plotly)){
install.packages("plotly", dependencies = T)
}
if(!require(Cairo)){
install.packages('Cairo')
}
if(!require(ggplot2)){
install.packages("ggplot2", dependencies = T)
}
if(!require(dplyr)){
install.packages("dplyr", dependencies = T)
}
if(!require(grid)){
install.packages("grid", dependencies = T)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = T)
}
library(Cairo)
library(ggplot2)
library(scales)
library(dplyr)
library(grid)
library(plotly)
library(tidyr)
theme_set(theme_bw())
d <- read.csv(file = "data/mp_data.csv", header = T, sep = ";", stringsAsFactors = F)
data <- d
# convert character to date
data$occ_date <- as.POSIXct(data$occ_date, format="%d/%m/%Y")
# removing na's
data <- na.omit(data)
# see general aspects of the data
str(data)
# view top few records of data
head(data)
# Five Numbersummary & interqurtile range
# Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data.
fivenum(data$census_trac)
# data's summary
summary(data)
# uniques
unique(data$CATEGORY)
unique(data$CALL.GROUPS)
unique(data$final_case_type)
unique(data$CASE.DESC)
unique(data$census_tract)
p <-ggplot(data, aes(CATEGORY)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CATEGORY), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Category" ,y = "Percent", fill="Category") +
scale_y_continuous(labels=percent)
ggplotly()
p <-ggplot(data, aes(CALL.GROUPS)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CALL.GROUPS), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Call Groups" ,y = "Percent", fill="Call Groups") +
scale_y_continuous(labels=percent)
ggplotly()
p <-ggplot(data, aes(CALL.GROUPS)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CALL.GROUPS), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Call Groups" ,y = "Percent", fill="Call Groups") +
scale_y_continuous(labels=percent) +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly()
p <-ggplot(data, aes(CATEGORY)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = CATEGORY), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Category" ,y = "Percent", fill="Category") +
scale_y_continuous(labels=percent)+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly()
p <-ggplot(data, aes(final_case_type)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = final_case_type), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Final Case" ,y = "Percent", fill="Final Case") +
scale_y_continuous(labels=percent)
ggplotly()
p <-ggplot(data, aes(final_case_type)) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = final_case_type), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Final Case" ,y = "Percent", fill="Final Case") +
scale_y_continuous(labels=percent)+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly()
p <-ggplot(data, aes(as.character(census_tract))) +
geom_bar(aes(y = (..count..)/sum(..count..), fill = as.character(census_tract)), stat="count") +
geom_text(aes( label = scales::percent((..count..)/sum(..count..)),
y= (..count..)/sum(..count..) ), stat= "count", vjust = -.5) +
labs(x = "Census Tract" ,y = "Percent", fill="Census Tract") +
scale_y_continuous(labels=percent)
ggplotly()
districts <- distinct(data, DISTRICT, .keep_all = TRUE)
# calculate percentage
get_perc <- data %>%
group_by(DISTRICT) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
mutate(perc = freq*100)
# join district with percentage
districts <- inner_join(districts, get_perc, by = "DISTRICT")
districts <-   select(districts, DISTRICT, x_coordinate, y_coordinate, perc)
# normalize coordinates
districts$x_coordinate <- districts$x_coordinate/100000
districts$y_coordinate <- districts$y_coordinate/100000
districts2 <- with(districts, districts[rep(1:nrow(districts), perc),])
# density's colors
colfunc <- colorRampPalette(c("darkblue", "lightblue", "green", "yellow", "red"))
p<-ggplot(districts2, aes(x_coordinate, y_coordinate)) +
stat_density2d(geom="tile", aes(fill = ..density..), contour = FALSE) +
scale_fill_gradientn(colours=colfunc(400)) +
xlim(c(min(districts$x_coordinate), max(districts$x_coordinate))) + ylim(c(min(districts$y_coordinate), max(districts$y_coordinate))) +
geom_density2d(colour="black", bins=10) +
geom_point() +
geom_text(aes(label=DISTRICT), size=3, hjust=-.25, vjust=.75) +
labs(x = "x", y = "y", fill = "Density")
guides(fill = guide_colorbar(barwidth = 0.5, barheight = 10)) +
theme(legend.title=element_blank())+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly()
g <- ggplot(d, aes(DISTRICT))
g1 <- g +  geom_histogram(aes(y=..density.., fill = CATEGORY), binwidth = 10) +
labs(x = "District", y = "Density", fill = "CATEGORY")+
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(g1)
